    Tipo de Datos:

        STRING(str):
            'Hola Mundo' o "Hola Mundo"

        INTEGER(int):
            -10 o 42 

        FLOAT(float):
            3.1415 o -10.0

        BOOLEAN(bool)
            TRUE o FALSE

1-) Operadores Aritméticos:
        Se usan para realizar operaciones matemáticas básicas.

            + : Suma
            - : Resta
            * : Multiplicación
            / : División
            % : Módulo (resto de la división)
            ** : Exponente (potencia)
            // : División entera (trunca el resultado a un entero)

2-) Operadores de Asignación:
        Se usan para asignar valores a variables.

            = : Asignación simple
            += : Suma y asigna
            -= : Resta y asigna
            *= : Multiplica y asigna
            /= : Divide y asigna
            %= : Módulo y asigna
            **= : Exponente y asigna
            //= : División entera y asigna

3-) Operadores de Comparación: 
        Se utilizan para comparar valores, y devuelven True o False.

            == : Igual a
            != : Diferente de
            > : Mayor que
            < : Menor que
            >= : Mayor o igual que
            <= : Menor o igual que

4-) Operadores Lógicos: Se utilizan para combinar valores booleanos.
        Se usan para combinar expresiones condicionales.

            and : Devuelve True si ambas condiciones son verdaderas
            or : Devuelve True si al menos una condición es verdadera
            not : Invierte el valor lógico (de True a False y viceversa)

5-) Operadores de Identidad:
        Se utilizan para comparar objetos y verificar si ocupan la misma posición en la memoria.

            is : Devuelve True si ambos objetos son el mismo
            is not : Devuelve True si ambos objetos no son el mismo

7-) Operadores de Pertenencia
        Se usan para verificar si un valor o variable se encuentra en una secuencia (como una lista, tupla, o cadena).

            in : Devuelve True si el valor está en la secuencia
            not in : Devuelve True si el valor no está en la secuencia

8-) Operadores Bit a Bit (Bitwise)
        Operan en binarios de los números.

            & : AND bit a bit
            | : OR bit a bit
            ^ : XOR bit a bit
            ~ : NOT bit a bit
            << : Desplazamiento a la izquierda
            >> : Desplazamiento a la derecha

9-) Estructuras de control de flujo:

        A-) Las Estructuras Selectivas o Estructuras Condicionales:
            Se utilizan para ejecutar diferentes bloques de código en función de ciertas condiciones. 
                Las más comunes son:
                    if 
                    elif 
                    else
            
        B-) Bucles o Ciclos (for, while):
            Esto se utilizan para repetir un bloque de código varias veces.
                    
                    for --> Este bucle se utiliza cuando conocemos de antemano el número de veces que queremos
                            que se repita una acción o bloque de código.

                    while --> Repite un bloque de condigo mientras una condición sea verdadera.

10-) Las funciones:
         Son un conjunto de instrucciones reutilizables que realizan una tarea específica.
            
            Ej: 
                def nombre(parámetros):
                    sentencias 
                    return 

        Parámetros --> son las variables que recibe una función.
            
            Tipos de Parámetros:
                                    Parámetros Posicionales: 
                                        Son los parámetros que se pasan a la función en el 
                                        orden en que están definidos.

                                    Parámetros con Valor por Defecto: 
                                        Puedes asignar valores por defecto a los parámetros,
                                        que se usarán si no se proporciona un argumento para 
                                        esos parámetros.

                                    Parámetros por Palabra Clave:

        Argumentos --> son los valores que se asigna a una función. 
        

11-) Módulo:
        Es un archivo que contiene código (como funciones, clases y variables) 
        que se puede reutilizar en otros programas.

            import  --> Se utiliza para incluir (importar)
                        un módulo en tu script para poder utilizar su código.
                            
                            Ej: import math 

            from    --> Permite importar funciones, clases, o variables específicas de un módulo.
                            
                            Ej: from math import ...



12-)        Sintaxis de Cadenas de :
                Las cadenas en Python se definen entre comillas simples ('), dobles ("), o triples (''' o """ para cadenas multilínea).  

            Métodos para Manipulación de Cadenas de Texto:

                lower() --> convierte todos los caracteres a minúsculas.
                upper() --> convierte todos los caracteres a mayúsculas.
                strip() --> Elimina los espacios en blanco al principio y al final de la cadena.
                replace(old, new): Reemplaza todas las ocurrencias de old por new.


13-) Listas:
                
    
    Sintaxis -->    Las lista se definen utilizando corchetes `[]` o la función `list()` y los elementos están separados por comas.
                
                Ej: 
                    my_lista = [1, 2, 3, 4, 5]
                    mi_lista = list([1, 2, 3, 4, 5])
    
    Indices -->     Las lista en Python son indexadas, lo que significa que puedes acceder a los elementos 
                    por su posición. Los indices empiezan en 0.
                
                Ej: mi_lista = [1, 2, 3, 4, 5]
                    print(mi_lista[0]) Imprime '1'

                    También puedes usar indices negativos para acceder a los elementos desde el final de la lista:

                Ej: mi_lista = [1, 2, 3, 4, 5]
                    print(mi_lista[-1]) Imprime '5'

    Valores -->     En una lista pueden ser de cualquier tipo de dato (números, cadenas, objetos, etc.). 
                    Las listas también pueden contener otros tipos de listas (listas anidadas).  

                Ej:  mi_lista = [1, "texto", [3, 4], True]
   
    Azar -->        Para seleccionar elementos aleatorios de una lista, puedes usar el módulo random. 

                Ej: 

                import random
                    mi_lista = [1, 2, 3, 4, 5]
                    elemento_aleatorio = random.choice(mi_lista)
                    print(elemento_aleatorio)


    Técnicas de iteración -->   Son métodos para recorrer secuencias de datos, como listas, tuplas, diccionarios,
                                conjuntos, y otros objetos iterables.

                                El bucle for es una de las formas más comunes de iterar sobre una secuencia en Python. 

                                    Ej: 
                                        frutas = ['manzana', 'banana', 'cereza']
                                        for fruta in frutas:
                                            print(fruta)
                                
                                El bucle while se usa cuando deseas iterar mientras se cumple una condición.

                                    Ej: 
                                        contador = 0
                                        while contador < 3:
                                            print(contador)
                                            contador += 1

    Ordenación:
                    sort() -->  ordena la lista en su lugar, es decir, modifica la lista original.
                                No devuelve nada: Devuelve None, por lo que no se puede asignar el resultado a una nueva variable.
                        
                        Ej: my_lista.sort()

                    sorted() -->    devuelve una nueva lista que está ordenada, mientras que la lista original permanece sin cambios.
                                    Devuelve una nueva lista: Puedes asignar el resultado a una nueva variable.

                        sorted(my_lista) --> Ordenación simple.

                        sorted(my_lista, reverse = True) --> Ordena inversa.

            Diferencia:
                        sort(): Modifica la lista en su lugar y no devuelve nada.
                        sorted(): Devuelve una nueva lista ordenada sin modificar la original.

